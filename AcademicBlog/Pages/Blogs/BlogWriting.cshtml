@page "/blogs/draft"
@model AcademicBlog.Pages.Blogs.BlogWritingModel
@using Markdig;
@using Html2Markdown;
@{
}
@{
    Func<string, string> ConvertHtmlToMarkdown = (html) => Markdown.ToPlainText(html, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
}
<div class="flex flex-col max-w-screen-xl mx-auto">
    <h1 class="text-4xl font-bold mx-auto">@Model.PageTitle</h1>
    <form id="writeForm" method="post" action="">

        <div>
            <label for="title" class="block text-sm font-bold leading-6 text-gray-900">Title</label>
            <div class="mt-2 relative">
                <input type="text" name="title" id="title" value="@(Model.IsEdit ? Model.EditPost.Title : "")" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="" aria-describedby="title-description">
                <div id="title-error-icon" class="hidden pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                    <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                    </svg>
                </div>
            </div>
            <p class="mt-2 text-sm text-red-600" id="title-error-text"></p>
            <p class="mt-2 text-sm text-gray-500" id="title-description">Choose a cool title for your blog</p>
        </div>
        <label for="thumbnail" class="block text-sm font-bold leading-6 text-gray-900 mt-4 mb-2">Thumnail</label>
        <p class="mt-2 text-sm text-red-600" id="thumbnail-error-text"></p>
        <div class="flex items-center justify-start my-4">
            <label id="upload-label" for="file" class=" w-[30rem] aspect-\[16\/9\] flex flex-col items-center justify-center h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
                <div id="upload-placeholder" class="flex flex-col items-center justify-center pt-5 pb-6">
                    <svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                    </svg>
                    <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                    <p class="text-xs text-gray-500 dark:text-gray-400">SVG, PNG, JPG or GIF (MAX. 800x400px)</p>
                </div>
                <input id="file" type="file" name="file" class="hidden" />
                <input id="thumbnail" type="text" value="@(Model.IsEdit ?Model.EditPost.ThumbnailUrl:"")" name="thumbnail" class="hidden" />

            </label>
        </div>
        <div class="flex gap-5">
            <div>
                <label for="category" class="block text-sm font-bold leading-6 text-gray-900">Category</label>
                <select id="category" name="category" class="mt-4 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                    @foreach (var category in Model.Categories)
                    {
                        <!option value="@category.Id" @(Model.IsEdit ? Model.EditPost.CategoryId == category.Id ? "selected":"" :"" ) >@category.Name</!option>
                    }
                </select>
            </div>
            <div>
                <label for="tag" class="block text-sm font-bold leading-6 text-gray-900  text-2xl ">Tag</label>
                <div class="flex gap-3 mt-4">
                    <input type="text" name="tag-enter" id="tag-enter" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm " placeholder="Tag" aria-describedby="email-description">
                    <button type="button" id="btn-add-tag" class="rounded-full bg-indigo-600 p-1.5 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                        </svg>
                    </button>
                    <div class="flex gap-2" id="tag-container">
                        @if (Model.IsEdit && Model.EditPost is not null)
                        {
                            foreach (var tag in Model.EditPost.Tags)
                            {
                                <span class="tag-chip inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset relative whitespace-nowrap @Utils.Utils.GetRandomPastelColor()">
                                    @tag.Name
                                    <input type="hidden" name="tag" value="@tag.Name">
                                    <button class="w-4 h-4 rounded-full bg-red-500 text-white absolute top-0 right-0 transform translate-x-1/2 -translate-y-1/2" type="button">x</button>
                                </span>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="flex gap-5 mt-10">
            <div>
                <label for="skill" class="block text-sm font-bold leading-6 text-gray-900 h-fit">Skills</label>
                <select id="skill" name="skill" class="mt-4 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                    @foreach (var skill in Model.Skills)
                    {
                        <option value="@skill.Id|@skill.Name" >@skill.Name</option>
                    }
                </select>
            </div>
            <div class="flex gap-2 items-end" id="skill-container">
                @if(Model.IsEdit && Model.EditPost is not null)
                {
                    foreach(var skill in Model.EditPost.Skills)
                    {
                        <span class="skill-chip h-fit inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset relative whitespace-nowrap @Utils.Utils.GetRandomPastelColor()">
                            @skill.Name
                            <input type="hidden" name="skill" value="@skill.Id"> <!-- Assuming value="1|SkillName" for the first option -->
                            <button class="w-4 h-4 rounded-full bg-red-500 text-white absolute top-0 right-0 transform translate-x-1/2 -translate-y-1/2" type="button">x</button>
                        </span>
                    }
                }
            </div>
        </div>
      @*   <div class="flex gap-5 mt-10">
            <label class="block text-gray-700">Choose Skills</label>
            @foreach (var item in Model.Skills)
            {
                <input type="checkbox" name="InputSkills" id="@item.Id" value="@item.Id" />
                <label for="@item.Id">@item.Name</label>
            }

        </div> *@
        <div class="my-4">
            <label for="content" class="block text-sm font-bold leading-6 text-gray-900 text-2xl mb-2">Content</label>
            <p class="mt-2 text-sm text-red-600" id="content-error-text"></p>
            <div class="row row-editor">
                <div class="editor-container border border-indigo-600 rounded-md overflow-hidden">
                    <div class="editor rounded-md"></div>
                </div>
            </div>
            <input type="hidden" name="content" id="content" />
        </div>
        <div class="my-4">
            <div>
                <label id="listbox-label" class="sr-only">Change published status</label>
                <div class="relative">
                    <div class="inline-flex divide-x divide-indigo-700 rounded-md shadow-sm">
                        <div id="btnSubmit" class="inline-flex items-center gap-x-1.5 rounded-l-md bg-indigo-600 px-3 py-2 text-white shadow-sm  cursor-pointer">
                            <svg class="-ml-0.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd" />
                            </svg>
                            <p class="text-sm font-semibold">Published</p>
                        </div>
                        <button type="button" class="inline-flex items-center rounded-l-none rounded-r-md bg-indigo-600 p-2 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 focus:ring-offset-gray-50" aria-haspopup="listbox" aria-expanded="true" aria-labelledby="listbox-label">
                            <span class="sr-only whitespace-nowrap">Change published status</span>
                            <svg class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>

                    <!--
                      Select popover, show/hide based on select state.

                      Entering: ""
                        From: ""
                        To: ""
                      Leaving: "transition ease-in duration-100"
                        From: "opacity-100"
                        To: "opacity-0"
                    -->
                    <ul class="hidden absolute right-0 z-10 mt-2 w-72 origin-top-right divide-y divide-gray-200 overflow-hidden rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" tabindex="-1" role="listbox" aria-labelledby="listbox-label" aria-activedescendant="listbox-option-0">
                        <!--
                          Select option, manage highlight styles based on mouseenter/mouseleave and keyboard navigation.

                          Highlighted: "bg-indigo-600 text-white", Not Highlighted: "text-gray-900"
                        -->
                        <li class="text-gray-900 cursor-default select-none p-4 text-sm " id="listbox-option-0" role="option">
                            <div class="flex flex-col">
                                <div class="flex justify-between">
                                    <!-- Selected: "font-semibold", Not Selected: "font-normal" -->
                                    <p class="font-normal">Published</p>
                                    <!--
                                      Checkmark, only display for selected option.

                                      Highlighted: "text-white", Not Highlighted: "text-indigo-600"
                                    -->
                                    <span class="text-indigo-600">
                                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd" />
                                        </svg>
                                    </span>
                                </div>
                                <!-- Highlighted: "text-indigo-200", Not Highlighted: "text-gray-500" -->
                                <p class="text-gray-500 mt-2">This job posting can be viewed by anyone who has the link.</p>
                            </div>
                        </li>

                        <!-- More items... -->
                    </ul>
                </div>
            </div>

        </div>
    </form>

</div>
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.1472.0.min.js"></script>
<script src="~/lib/ckeditor/ckeditor.js"></script>
<script src="~/lib/ckeditor/script.js"></script>
<!-- jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- jQuery Validation plugin -->
<script src="https://cdn.jsdelivr.net/jquery.validation/1.19.3/jquery.validate.min.js"></script>

<script>
    const button = document.getElementById("btn-add-tag");
    const select = document.getElementById("skill");
    const listSkill = document.getElementById("skill-container");
    const list = document.getElementById("tag-container");
    const input = document.getElementById("tag-enter");
    const badgeEnum = [
        "bg-gray-50  text-gray-600 ring-gray-500/10",
        "bg-red-50 text-red-700 ring-red-600/10",
        "bg-yellow-50 text-yellow-800 ring-yellow-600/20",
        "bg-green-50 text-green-700 ring-green-600/20",
        "bg-blue-50  text-blue-700 ring-blue-700/10",
        "bg-indigo-50 text-indigo-700 ring-indigo-700/10",
        "bg-purple-50 text-purple-700 ring-purple-700/10",
        "bg-pink-50 text-pink-700 ring-pink-700/10"
    ];
    button.addEventListener("click", () => {
        const inputValue = input.value.trim(); // Get the trimmed input value

        if (inputValue !== "") {
            const existingChips = list.getElementsByClassName("tag-chip");
            const existingChipTexts = Array.from(existingChips).map(chip => chip.textContent.toLowerCase());

            if (existingChipTexts.includes(inputValue.toLowerCase().replaceAll(" ", "")+"x")) {
                alert("This tag already exists.");
                return;
            }

            // Create a hidden input element
            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = "tag"; // Set the name attribute to "tag"
            hiddenInput.value = inputValue; // Set the value to the input value

            // Create a chip element
            const chip = document.createElement("span");
            chip.className = "tag-chip inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset relative whitespace-nowrap " + badgeEnum[Math.floor(Math.random() * badgeEnum.length)]; // You should define a CSS class for the chip style
            chip.textContent = inputValue;
            const deleteButton = document.createElement("button");
            deleteButton.value = inputValue;
            deleteButton.className = "w-4 h-4 rounded-full bg-red-500 text-white absolute top-0 right-0 transform translate-x-1/2 -translate-y-1/2 "
            deleteButton.innerHTML = "x";
            deleteButton.type = "button";
            deleteButton.onclick = (e) => {
                // console.log("button value ", e.target.value);

                const existingChips = list.getElementsByClassName("tag-chip");
                const existingChipTexts = Array.from(existingChips).filter(chip => chip.textContent == e.target.value+"x")?.[0];
                // console.log("Node delete", existingChipTexts);
                if (existingChipTexts){
                list.removeChild(existingChipTexts);
                } 
            }
            chip.appendChild(deleteButton);
            // Append both elements to the list
            chip.appendChild(hiddenInput);
            list.appendChild(chip);

            // Clear the input field
            input.value = "";
        }
    })

    select.onchange = (e)=>{
        const [id, name] = e.target.value?.split("|");
        const hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.name = "skill"; // Set the name attribute to "tag"
        hiddenInput.value = id; // Set the value to the input value
        const existingChips = listSkill.getElementsByClassName("skill-chip");
        const existingChipTexts = Array.from(existingChips).map(chip => chip.textContent.toLowerCase());
        if (existingChipTexts.includes(name.toLowerCase().replaceAll(" ", "") + "x")) {
            alert("This skill already exists.");
            return;
        }
        // Create a chip element
        const chip = document.createElement("span");
        chip.className = " skill-chip h-fit inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset relative whitespace-nowrap " + badgeEnum[Math.floor(Math.random() * badgeEnum.length)]; // You should define a CSS class for the chip style
        chip.textContent = name;
        const deleteButton = document.createElement("button");
        deleteButton.value = name;
        deleteButton.className = "w-4 h-4 rounded-full bg-red-500 text-white absolute top-0 right-0 transform translate-x-1/2 -translate-y-1/2 "
        deleteButton.innerHTML = "x";
        deleteButton.type = "button";
        deleteButton.onclick = (e) => {
            // console.log("button value ", e.target.value);

            const existingChips = listSkill.getElementsByClassName("skill-chip");
            const existingChipTexts = Array.from(existingChips).filter(chip => chip.textContent == name + "x")?.[0];
            // console.log("Node delete", existingChipTexts);
            if (existingChipTexts) {
                listSkill.removeChild(existingChipTexts);
            }
        }
        chip.appendChild(deleteButton);
        // Append both elements to the listSkill
        chip.appendChild(hiddenInput);
        listSkill.appendChild(chip);
    }
</script>
<script>
    const uploadInput = document.querySelector("#file");
    const uploadLabel = document.querySelector("#upload-label");
    const uploadPlaceholder = document.querySelector("#upload-placeholder");
    uploadInput.addEventListener("change", () => {
        const selectedFile = uploadInput.files[0];

        if (selectedFile) {
            // Hide the upload placeholder
            uploadPlaceholder.style.display = "none";
            // Set the background image to the selected file

            const url = URL.createObjectURL(selectedFile);
            uploadLabel.style.display = "block";
            uploadLabel.style.backgroundImage = `url(${url})`;
            uploadLabel.style.backgroundSize = "cover"; // Optional: Adjust background size as needed
            uploadLabel.style.backgroundPosition = "center";

            // Clear the input value to allow selecting the same file again
        } else {
            // Show the upload placeholder
            uploadPlaceholder.style.display = "block";

            // Reset the background of the upload label to bg-gray-50
            uploadLabel.style.backgroundColor = "#F3F4F6"; // Set to bg-gray-50
        }
    });
</script>
<script>
    // Get references to the form and submit button
    const form = document.getElementById("writeForm");
    const submitButton = document.getElementById("btnSubmit");
    const contentControl = document.getElementById("content");
    const hiddenThumbnail = document.getElementById("thumbnail");
    const inputFile = document.getElementById("file");

    // Add a click event listener to the submit button
    submitButton.addEventListener("click", async function () {
        const errorClass = "ring-red-300 placeholder:text-red-300 focus:ring-2 focus:ring-inset focus:ring-red-500";
        if (!$("#title").val().trim()) {
            $("#title").addClass(errorClass);
            $("#title-error-text").append("Title cannot be empty");
            $("#title-error-icon").removeClass("hidden");
            return;
        } else {
            $("#title").removeClass(errorClass);
            $("#title-error-text").html("");
            $("#title-error-icon").addClass("hidden");
        }

        //TODO get file from inputFile, if exist use aws-sdk v2 with global var is AWS to upload to S3 then set Attribute value of hiddenThumbnail is url of that that object
        if (inputFile.files.length > 0) {
            $("#thumbnail-error-text").html("")
            const file = inputFile.files[0];

            // Upload the file to S3 using the AWS SDK v2
            const s3 = new AWS.S3({
                credentials: {
                    accessKeyId: "AKIAWPKX6GSPLAZFCWG5",
                    secretAccessKey: "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"
                },
                region: "ap-southeast-1"
            }); // Assuming AWS is properly configured

            const params = {
                Bucket: "momkitchen",
                Key: "demo/academicblog/" + file.name, // Set the path and filename as needed
                Body: file
            };

            try {
                const data = await s3.upload(params).promise();
                console.log(data);
                // Set the value of hiddenThumbnail to the URL of the uploaded object
                hiddenThumbnail.setAttribute("value", data.Location);
            } catch (error) {
                console.error("Error uploading file to S3:", error);
            }
        } else {
            $("#thumbnail-error-text").html("Choose a thumbnail please")
        }

        if (!editor.getData()) {
            $(".editor-container").addClass(errorClass);
            $("#content-error-text").append("Content cannot be null")
            return;
        } else {
            $(".editor-container").removeClass(errorClass);
            $("#content-error-text").html("")

        }
        contentControl.setAttribute("value", editor.getData())
        form.submit();
    });
</script>
@* Validatation *@
<script>
    $(document).ready(function () {
        $("#title").validate({
            rules: {
                title: {
                    required: true
                }
            },
            messages: {
                title: {
                    required: "Please enter a title for your blog."
                }
            },
            errorPlacement: function (error, element) {
                // Customize error placement
                error.insertAfter("#title-error-text"); //Append error message to the validationErrors div
                console.error(error);

            },

            errorClass: "text-red-600",
        });

    });
</script>

<script>
    window.onload = () => {
        if (@(Model.IsEdit ? "true" : "false")) {
            const uploadLabel = document.querySelector("#upload-label");
            const uploadPlaceholder = document.querySelector("#upload-placeholder");
            uploadPlaceholder.style.display = "none";
            // Set the background image to the selected file

            uploadLabel.style.display = "block";
            uploadLabel.style.backgroundImage = `url(@Model.EditPost.ThumbnailUrl)`;
            uploadLabel.style.backgroundSize = "cover"; // Optional: Adjust background size as needed
            uploadLabel.style.backgroundPosition = "center";
            @{
        var converter = new Converter();
            }
                editor.setData("@converter.Convert(Model.EditPost.Content)");
        }
    }
</script>
